{"version":3,"sources":["App.js","Root.js","serviceWorker.js","index.js"],"names":["TOKENS","hb_shop","cong_nghe_so","App","props","_getToken","state","token","_handleChangeShop","e","setState","currentTarget","value","_onMessageChange","message","_onSDTChange","sdt","_onSendClick","isSending","_parseAllPhoneNumber","forEach","_isValidPhone","_sendToAPhone","alert","error","_sendToAUserID","uid","a","url","data","fetch","method","headers","body","JSON","stringify","then","response","json","className","this","onChange","placeholder","onClick","test","split","map","startsWith","replace","phone","show","Component","withAlert","options","position","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","Root","template","AlertTemplate","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.f2a86191.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { withAlert } from 'react-alert'\n\nconst TOKEN_HB_SHOP = \"At8PSdhc6JGfSXboVUSSD2vu7NTvyMXVBWKnPdlnCrrDFaDTL_SoR5WZH2ffuoCESGr_DLYV3tL-Trb9Jfy_M5bEF7DzXpf4PLW_0ao8EpCUP7vq6O9zQoniFtjvdJj3SdGyQqAbGafQSJn9GOmtT7GTV6Kdr1yaTJz99oNmBXWY1bOWC-KV11Lm5ISIWsCjE18cCGh0KIm24mCGBVzuE0ShUHq2u7eW9nLzCJJKTYGd11yoVCfaSL8iFpG3yLaBK64WDGItMX4595yjLB8cBaDYfpDoUliUCG\"\nconst TOKEN_CNS = \"Vh5IIDi-mHzyiL98t3_47tkxLatOARTR2Drq2_4hbbvUkc5fZbMAHLk_V6gCJF5DBfWBQO4KapDdu6bWXXk5R7NCJ4sF6A9lLP5JRuvfgcP-XMqpaapr4Yc-8ZZOJiHj6RS2NCa-cWSNqGaBr5_B016y2XB4T9j96xjSRU9WgLb4aL1SwqMsL2s1P7xaJQ9-AuH0MkTYXN41cc9D_M28SGElOaQWFg4MVjXpC94sjnv6_YuJumFdHIVATXx01E0vO-qD4xe9d48Tsmzk_GIUMfQye6FR8yOQ\"\nconst TOKENS = {\n  hb_shop: TOKEN_HB_SHOP,\n  cong_nghe_so: TOKEN_CNS\n}\nconst SEND_MESSAGE_URL = `https://openapi.zalo.me/v2.0/oa/message`\nconst GET_UID_URL = `https://openapi.zalo.me/v2.0/oa/getprofile`\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      token: 'hb_shop',\n      message: '',\n      sdt: '',\n      isSending: false\n    }\n  }\n\n  componentDidMount() {\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"app-container\">\n          <div className=\"title\">\n            Send message to Zalo user\n          </div>\n          <div className=\"field\">\n            <label>Select Shop:</label>\n            <select value={this.state.token} onChange={this._handleChangeShop}>\n              <option value=\"hb_shop\">HB Shop</option>\n              <option value=\"cong_nghe_so\">Công nghệ số</option>\n            </select>\n          </div>\n          <div className=\"field\">\n            <label>Message:</label>\n            <textarea onChange={this._onMessageChange}></textarea>\n          </div>\n          <div className=\"field\">\n            <label>SDT:</label>\n            <textarea onChange={this._onSDTChange} placeholder=\"EX: 0123456789;012345689\"></textarea>\n          </div>\n          <div className=\"button-container\">\n            <button onClick={this._onSendClick}>Send Message</button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  _getToken = () => {\n    return TOKENS[this.state.token]\n  }\n\n  _handleChangeShop = (e) => {\n    this.setState({ token: e.currentTarget.value })\n  }\n\n  _onMessageChange = (e) => {\n    this.setState({ message: e.currentTarget.value })\n  }\n\n  _onSDTChange = (e) => {\n    this.setState({ sdt: e.currentTarget.value })\n  }\n\n  _onSendClick = () => {\n    this.setState({ isSending: true })\n    const sdts = this._parseAllPhoneNumber()\n    sdts.forEach((sdt) => {\n      if (this._isValidPhone(sdt)) {\n        this._sendToAPhone(sdt);\n      } else {\n        this.props.alert.error(`SDT: ${sdt} không hợp lệ`)\n      }\n    })\n  }\n\n  _isValidPhone(sdt) {\n    if (/^\\d{10,11}$/.test(sdt)) {\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n  _parseAllPhoneNumber() {\n    let sdts = this.state['sdt'].split(';').map((sdt) => {\n      if (!sdt.startsWith('0')) {\n        sdt = '0' + sdt;\n      }\n      sdt = sdt.replace(/\\s+/, '')\n      return sdt;\n    })\n    return sdts;\n  }\n\n  _sendToAPhone(phone) {\n    let url = `${GET_UID_URL}?access_token=${this._getToken()}&data={\"user_id\":\"${phone}\"}`\n    fetch(url).then((response) => {\n      return response.json()\n    })\n      .then((response) => {\n        if (response['message'] == 'Success') {\n          this._sendToAUserID(response['data']['user_id']).then((response) => {\n            if (response.message == \"Success\") {\n              this.props.alert.show(`Message sended to: ${phone}`)\n            }\n          });\n        } else if (response['message'] == 'user has not followed oa') {\n          this.props.alert.error(`Người dùng này chưa mua hàng trên shop: ${phone}`)\n        }\n      })\n  }\n\n  _sendToAUserID = async (uid) => {\n    let url = `${SEND_MESSAGE_URL}?access_token=${this._getToken()}`\n    const data = {\n      \"recipient\": {\n        \"user_id\": uid\n      },\n      \"message\": {\n        \"text\": this.state['message']\n      }\n    }\n    let response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify(data)\n    }).then((response) => (response.json()))\n\n    return response;\n  }\n}\n\nexport default withAlert()(App);\n","// index.js\nimport React from 'react'\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\nimport App from './App'\n\n// optional cofiguration\nconst options = {\n  // you can also just use 'bottom center'\n  position: positions.BOTTOM_CENTER,\n  timeout: 5000,\n  offset: '30px',\n  // you can also just use 'scale'\n  transition: transitions.SCALE\n}\n\nconst Root = () => (\n  <AlertProvider template={AlertTemplate} {...options}>\n    <App />\n  </AlertProvider>\n)\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Root from './Root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}